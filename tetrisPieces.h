#pragma once
#include "raylib.h"
#include <array>

#define ny 20
#define nx 10
using BoardType = std::array<std::array<Color, ny>, nx>;

typedef struct {
    Color color;
    int posX;
    double posY;
    unsigned int rotation;
    unsigned int Shape;
    bool Initialized = false;
    bool fastFalling;
} OutPiece;

class Piece{
    public:
        Color color;
        int posX;
        double posY;
        unsigned int rotation;
        unsigned int pieceShape;
        bool Initialized;
        bool fastFalling;

        const int weight[15] = {100, 50, 100, 20, 30, 100, 50, 50, 35, 35, 50, 50, 35, 35, 30};
        const int shapes[15][4][5][2] = {
                {{{-1, 0}, { 0, 0}, { 1, 0}, { 2, 0}, { 0, 0}}, {{ 0,-1}, { 0, 0}, { 0, 1}, { 0, 2}, { 0, 0}}, {{-1, 0}, { 0, 0}, { 1, 0}, { 2, 0}, { 0, 0}}, {{ 0,-1}, { 0, 0}, { 0, 1}, { 0, 2}, { 0, 0}}}, //  0 shape: I 
                {{{ 0, 0}, { 1, 0}, { 0, 0}, { 0, 0}, { 0, 0}}, {{ 0, 0}, { 0, 1}, { 0, 0}, { 0, 0}, { 0, 0}}, {{ 0, 0}, { 1, 0}, { 0, 0}, { 0, 0}, { 0, 0}}, {{ 0, 0}, { 0, 1}, { 0, 0}, { 0, 0}, { 0, 0}}}, //  1 shape: i
                {{{ 0, 0}, { 1, 0}, { 0, 1}, { 1, 1}, { 0, 0}}, {{ 0, 0}, { 1, 0}, { 0, 1}, { 1, 1}, { 0, 0}}, {{ 0, 0}, { 1, 0}, { 0, 1}, { 1, 1}, { 0, 0}}, {{ 0, 0}, { 1, 0}, { 0, 1}, { 1, 1}, { 0, 0}}}, //  2 shape: sq
                {{{ 0, 0}, { 0, 1}, { 0, 2}, { 1, 1}, {-1, 1}}, {{ 0, 0}, { 0, 1}, { 0, 2}, { 1, 1}, {-1, 1}}, {{ 0, 0}, { 0, 1}, { 0, 2}, { 1, 1}, {-1, 1}}, {{ 0, 0}, { 0, 1}, { 0, 2}, { 1, 1}, {-1, 1}}}, //  3 shape: plus
                {{{ 0, 0}, {-1, 0}, { 1, 0}, {-1, 1}, { 1, 1}}, {{ 0, 0}, { 0,-1}, { 0, 1}, {-1,-1}, {-1, 1}}, {{ 0, 0}, { 1, 0}, {-1, 0}, { 1,-1}, {-1,-1}}, {{ 0, 0}, { 0, 1}, { 0,-1}, { 1, 1}, { 1,-1}}}, //  4 shape: U
                {{{-1, 0}, { 0, 0}, { 1, 0}, { 0, 1}, { 0, 0}}, {{ 0,-1}, { 0, 0}, { 0, 1}, {-1, 0}, { 0, 0}}, {{ 1, 0}, { 0, 0}, {-1, 0}, { 0,-1}, { 0, 0}}, {{ 0, 1}, { 0, 0}, { 0,-1}, { 1, 0}, { 0, 0}}}, //  5 shape: T
                {{{-1, 0}, { 0, 0}, { 1, 0}, {-1, 1}, { 0, 0}}, {{ 0,-1}, { 0, 0}, { 0, 1}, {-1,-1}, { 0, 0}}, {{ 1, 0}, { 0, 0}, {-1, 0}, { 1,-1}, { 0, 0}}, {{ 0, 1}, { 0, 0}, { 0,-1}, { 1, 1}, { 0, 0}}}, //  6 shape: L1
                {{{-1, 0}, { 0, 0}, { 1, 0}, { 1, 1}, { 0, 0}}, {{ 0,-1}, { 0, 0}, { 0, 1}, {-1, 1}, { 0, 0}}, {{ 1, 0}, { 0, 0}, {-1, 0}, {-1,-1}, { 0, 0}}, {{ 0, 1}, { 0, 0}, { 0,-1}, { 1,-1}, { 0, 0}}}, //  7 shape: L2
                {{{-1, 0}, { 0, 0}, { 1, 0}, { 2, 0}, {-1, 1}}, {{ 0,-1}, { 0, 0}, { 0, 1}, { 0, 2}, {-1,-1}}, {{-1, 0}, { 0, 0}, { 1, 0}, { 2, 0}, { 2,-1}}, {{ 0,-1}, { 0, 0}, { 0, 1}, { 0, 2}, { 1, 2}}}, //  8 shape: LL1
                {{{-1, 0}, { 0, 0}, { 1, 0}, { 2, 0}, { 2, 1}}, {{ 0,-1}, { 0, 0}, { 0, 1}, { 0, 2}, {-1, 2}}, {{-1, 0}, { 0, 0}, { 1, 0}, {-2, 0}, {-2,-1}}, {{ 0,-1}, { 0, 0}, { 0, 1}, { 0,-2}, { 1,-2}}}, //  9 shape: LL2
                {{{-1, 0}, { 0, 0}, { 0, 1}, { 1, 1}, { 0, 0}}, {{ 0,-1}, { 0, 0}, {-1, 0}, {-1, 1}, { 0, 0}}, {{ 1, 0}, { 0, 0}, { 0,-1}, {-1,-1}, { 0, 0}}, {{ 0, 1}, { 0, 0}, { 1, 0}, { 1,-1}, { 0, 0}}}, // 10 shape: S1
                {{{-1, 1}, { 0, 1}, { 0, 0}, { 1, 0}, { 0, 0}}, {{-1,-1}, {-1, 0}, { 0, 0}, { 0, 1}, { 0, 0}}, {{ 1,-1}, { 0,-1}, { 0, 0}, {-1, 0}, { 0, 0}}, {{ 1, 1}, { 1, 0}, { 0, 0}, { 0,-1}, { 0, 0}}}, // 11 shape: S2
                {{{-1, 0}, { 0, 0}, { 1, 0}, { 0, 1}, { 1, 1}}, {{ 0,-1}, { 0, 0}, { 0, 1}, {-1, 0}, {-1, 1}}, {{ 1, 0}, { 0, 0}, {-1, 0}, { 0,-1}, {-1,-1}}, {{ 0, 1}, { 0, 0}, { 0,-1}, { 1, 0}, { 1,-1}}}, // 12 shape: P1
                {{{-1, 0}, { 0, 0}, { 1, 0}, { 0, 1}, {-1, 1}}, {{ 0,-1}, { 0, 0}, { 0, 1}, {-1, 0}, {-1,-1}}, {{ 1, 0}, { 0, 0}, {-1, 0}, { 0,-1}, { 1,-1}}, {{ 0, 1}, { 0, 0}, { 0,-1}, { 1, 0}, { 1, 1}}}, // 13 shape: P2
                {{{ 0, 0}, {-1 ,0}, { 1, 0}, { 0, 1}, { 0, 2}}, {{-1, 1}, { 0, 1}, { 1, 0}, { 1, 1}, { 1, 2}}, {{ 0, 0}, { 0, 1}, { 0, 2}, {-1, 2}, { 1, 2}}, {{-1, 0}, {-1, 1}, {-1, 2}, { 0, 1}, { 1, 1}}}  // 14 shape: TT
            };
        const int shapeDims[15][2] = {{ 4, 1}, { 2, 1}, { 2, 2}, { 3, 3}, { 3, 2}, { 3, 2}, { 3, 2}, { 3, 2}, { 4, 2}, { 4, 2}, { 3, 2}, { 3, 2}, { 3, 2}, { 3, 2}, { 3, 3}};

    Piece();
    void deletePiece();
    void init(OutPiece& p);
    void rotate(BoardType& Board);
    void fall(int time0);
    void move(BoardType& Board);
    void SetFastFalling();
    bool shouldFreeze(BoardType& Board);
};